{"version":3,"sources":["components/Header/header.js","components/List/list.js","components/Details/details.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","mainHeader","subHeader","List","state","data","project","this","history","push","pathname","id","title","description","project_text","image","url","getCategories","map","row","Category_title","Category_intro","key","uuid","getProjects","projects","onClick","viewDetails","style","backgroundImage","backgroundSize","href","console","log","fetch","then","response","json","responseJson","setState","catch","error","mainData","rowProjects","length","projectId","find","items","finalCategories","forEach","categories","category","filter","cat","sort","a","b","getLoaderOrList","React","Component","Details","location","alt","src","App","exact","path","component","PureComponent","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.de687ecc.chunk.js","sourcesContent":["import React from 'react';\nimport './header.css';\n\nfunction Header(props) {\n    const body = (\n        <div className='ae-container'>\n            <div className='header'>{props.mainHeader}</div>\n            <div className='sub-header'>{props.subHeader}</div>\n        </div>\n    );\n    return body;\n};\n\nexport default Header;","import React from 'react';\nimport { v4 as uuid } from 'uuid';\n\nimport Header from '../Header/header';\n\nimport './list.css';\n\n\n\nexport default class List extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n          data: null\n        };\n      }\n\n    viewDetails(project) {\n        this.props.history.push({\n            pathname: `/details/${project.id}`,\n            state: {\n                title: project.title,\n                description: project.project_text,\n                image: project.image.url\n            }\n        })\n    }\n\n    getLoaderOrList() {\n        if (this.state.data) {\n            const list = this.getCategories(this.state.data).map(row => {\n                return (\n                    <div className='row ae-padded'>\n                        <Header mainHeader={row.Category_title} subHeader={row.Category_intro} key={uuid()} />\n                        <br />\n                        {\n                            this.getProjects(row.projects, this.state.data).map(project => {\n                                return (\n                                    <div className='col-sm-3 ' onClick={() => this.viewDetails(project)}>\n                                        <div className='card' style={{ \n                                            backgroundImage: `url('https://apps.aecom-digital.com/excellence/${project.image.url}')`,\n                                            backgroundSize: 'cover'\n                                        }}>\n                                            <h5></h5>\n                                        </div>\n                                        <h6 className='box-label'>{project.title}</h6>\n                                    </div>\n                                );\n                            })\n                        }\n                        <br />\n                        <br />\n                        <div className='ae-container'>\n                            <a className='ae-back-to-top' href=\"#\">Back To Top</a>\n                        </div>\n                        <br />\n                    </div>\n                )\n            })\n            return list;\n        } else {\n          return <div className='loader'>Loading...</div>\n        }\n    }\n    \n    componentDidMount() {\n        console.log(\"1\");\n        fetch('https://apps.aecom-digital.com/excellence/projects')\n            .then(response => response.json())\n            .then(responseJson => this.setState({ data : responseJson }))\n            .catch(error => console.error(error));\n    }\n\n    getProjects(projects, mainData) {\n        let rowProjects = []\n        if (projects.length) {\n            projects.map(projectId => {\n                return rowProjects.push(\n                    mainData.find(data => data.id === projectId))\n            })\n        }\n        return rowProjects;\n    }\n\n    getCategories(items) {\n        let finalCategories = [];\n        if (items) {\n            items.forEach(data => {\n                const { categories } = data;\n                if (categories) {\n                    categories.map(category => {\n                        if (finalCategories.filter(cat =>\n                            cat.Category_title === category.Category_title).length === 0) {\n                            finalCategories.push(category);\n                        }\n                    })   \n                }\n            });\n        }\n        return finalCategories.sort((a, b) => (a.Category_title > b.Category_title) ? 1 : -1);\n    }\n    \n    render() {\n        return (\n            this.getLoaderOrList()\n        )\n    };\n};\n","import React from 'react';\nimport './details.css';\n\nimport Header from '../Header/header';\n\nexport default class Details extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n          title: '',\n          description: '',\n          image: ''\n        };\n      }\n\n    componentDidMount() {\n        console.log(this.props.location);\n        const { title, description, image } = this.props.location.state;\n        this.setState({\n            title,\n            description,\n            image\n        })\n    }\n    render() {\n        return (\n            <div className='container'>\n                <Header mainHeader={this.state.title} subHeader={this.state.description} />\n                <br />\n                <img alt='' src={`https://apps.aecom-digital.com/excellence/${this.state.image}`} />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport List from './components/List/list'\nimport Details from './components/Details/details'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nexport default class App extends React.PureComponent {\n\n  render() {\n    return(\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/details/:id\" component={Details} />\n          <Route exact path=\"\" component={List} />\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}